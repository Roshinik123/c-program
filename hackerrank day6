1.Reverse the String
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    char str[50];
    fgets(str,sizeof(str),stdin);
    int len=strlen(str)-1;
    for(int i=len-1;i>=0;i--)
    {
        printf("%c",str[i]);
    }
    return 0;
}
2.Anagram
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to check if two strings are anagrams
int areAnagrams(char str1[], char str2[]) {
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    
    // Remove spaces and convert to lowercase
    char cleanStr1[len1 + 1], cleanStr2[len2 + 1];
    int idx1 = 0, idx2 = 0;
    
    for (int i = 0; i < len1; i++) {
        if (!isspace(str1[i])) {
            cleanStr1[idx1++] = tolower(str1[i]);
        }
    }
    cleanStr1[idx1] = '\0';
    
    for (int i = 0; i < len2; i++) {
        if (!isspace(str2[i])) {
            cleanStr2[idx2++] = tolower(str2[i]);
        }
    }
    cleanStr2[idx2] = '\0';
    
    // Check if lengths are different
    if (idx1 != idx2) {
        return 0; // Not anagrams if lengths are different
    }
    
    // Sort characters in both strings
    int count1[256] = {0};
    int count2[256] = {0};
    
    for (int i = 0; i < idx1; i++) {
        count1[cleanStr1[i]]++;
        count2[cleanStr2[i]]++;
    }
    
    // Compare character counts
    for (int i = 0; i < 256; i++) {
        if (count1[i] != count2[i]) {
            return 0; // Not anagrams if character counts are different
        }
    }
    
    return 1; // Strings are anagrams
}

int main() {
    char str1[100], str2[100];
    
    // Reading input
    scanf("%s %s", str1, str2);
    
    // Check if strings are anagrams
    if (areAnagrams(str1, str2)) {
        printf("True\n");
    } else {
        printf("False\n");
    }
    
    return 0;
}
3.count pairs in array
#include <stdio.h>
#include <stdlib.h>

// Function to compare integers for ascending order sorting
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to find the number of pairs with difference k
int countPairsWithDifference(int arr[], int n, int k) {
    int count = 0;
    
    // Sort the array in ascending order
    qsort(arr, n, sizeof(int), compare);
    
    // Two-pointer technique to find pairs with difference k
    int i = 0, j = 1;
    while (j < n) {
        if (arr[j] - arr[i] == k) {
            count++;
            j++;
        } else if (arr[j] - arr[i] > k) {
            i++;
        } else {
            j++;
        }
    }
    
    return count;
}

int main() {
    int n, k;
    scanf("%d %d", &n, &k);
    
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    // Calculate and print the number of pairs with difference k
    int result = countPairsWithDifference(arr, n, k);
    printf("%d\n", result);
    
    return 0;
}
4.Isomorphic string or not
#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 1001

// Function to check if two strings are isomorphic
bool areIsomorphic(char *s, char *t) {
    int len_s = strlen(s);
    int len_t = strlen(t);
    
    // If lengths are different, they can't be isomorphic
    if (len_s != len_t) {
        return false;
    }
    
    // Arrays to store mappings from s to t and t to s
    char map_s_to_t[256] = {0};
    char map_t_to_s[256] = {0};
    
    for (int i = 0; i < len_s; i++) {
        char char_s = s[i];
        char char_t = t[i];
        
        // Check if mapping is already established
        if (map_s_to_t[char_s] == 0 && map_t_to_s[char_t] == 0) {
            // Establish mappings
            map_s_to_t[char_s] = char_t;
            map_t_to_s[char_t] = char_s;
        } else {
            // Check if current mapping matches
            if (map_s_to_t[char_s] != char_t || map_t_to_s[char_t] != char_s) {
                return false;
            }
        }
    }
    
    return true;
}

int main() {
    char s[MAX_SIZE], t[MAX_SIZE];
    
    // Reading input
    scanf("%s", s);
    scanf("%s", t);
    
    // Check if strings are isomorphic and print result
    if (areIsomorphic(s, t)) {
        printf("True\n");
    } else {
        printf("False\n");
    }
    
    return 0;
}
5.Rotate matrix by 90% degree 2
#include <stdio.h>
#define MAX_SIZE 100
void rotateMatrix(int mat[][MAX_SIZE], int n, int m) {
    int temp[MAX_SIZE][MAX_SIZE];
     for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            temp[j][n - 1 - i] = mat[i][j];
        }
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            mat[i][j] = temp[i][j];
        }
    }
}
int main() {
    int n, m;
    int mat[MAX_SIZE][MAX_SIZE];
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &mat[i][j]);
        }
    }
    rotateMatrix(mat, n, m);
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}
